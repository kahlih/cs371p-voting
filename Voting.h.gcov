        -:    0:Source:Voting.h
        -:    0:Graph:Voting.gcno
        -:    0:Data:Voting.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// --------------------------
        -:    2:// projects/voting/Voting.h
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// --------------------------
        -:    6:
        -:    7:#ifndef Voting_h
        -:    8:#define Voting_h
        -:    9:#endif
        -:   10:
        -:   11:// --------
        -:   12:// includes
        -:   13:// --------
        -:   14:#include <deque>
        -:   15:#include <string>
        -:   16:
        -:   17:
        -:   18:using namespace std;
        -:   19:
function _ZN9candidateD2Ev called 0 returned 0% blocks executed 0%
function _ZN9candidateC2ERKS_ called 0 returned 0% blocks executed 0%
    #####:   20:class candidate {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:   21:
        -:   22:	public:
function _ZN9candidateC2ESsi called 0 returned 0% blocks executed 0%
    #####:   23:		candidate(string pname, int pid){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   24:			name = pname;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   25:			id = pid;
    #####:   26:		}
        -:   27:		//candidate() {}
        -:   28:		string name;
        -:   29:		int id ;
        -:   30:		deque<deque<int>> ballots;
        -:   31:
        -:   32:		candidate operator=(candidate& rhs) {
        -:   33:			
        -:   34:			this->name = rhs.name;
        -:   35:			this->ballots = rhs.ballots;
        -:   36:
        -:   37:			return *this;
        -:   38:		}
        -:   39:
function _ZN9candidateaSERKS_ called 0 returned 0% blocks executed 0%
    #####:   40:		const candidate& operator=(const candidate &c){
    #####:   41:			this->name = c.name;
call    0 never executed
    #####:   42:			this->ballots = c.ballots;
call    0 never executed
    #####:   43:			this->id = c.id;
    #####:   44:			return *this;
        -:   45:		}
        -:   46:
function _ZN9candidate15print_candidateEv called 0 returned 0% blocks executed 0%
    #####:   47:		void print_candidate(){
    #####:   48:			cout << this->name << endl;
call    0 never executed
call    1 never executed
    #####:   49:			cout << "ID: " << this->id << endl;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   50:			cout << "Ballots: " <<endl;
call    0 never executed
call    1 never executed
    #####:   51:			for (deque<int> b : this->ballots){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:   52:				for (int s : b){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:   53:					cout << s << " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   54:				}
    #####:   55:				cout << endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:			}
call    0 never executed
call    1 never executed
    #####:   57:			cout << endl;
call    0 never executed
    #####:   58:		}
        -:   59:};
        -:   60:
        -:   61:void print_state_loosing();
        -:   62:void print_state_running();
        -:   63:void pre_eval();
        -:   64:bool checkRunning();
        -:   65:void eval();
        -:   66:void parse_input(istream &input);
        -:   67:void go(istream &input, ostream &o);
